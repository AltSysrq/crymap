The RFC 3501 formal syntax section is nearly unreadable since it lists items in
alphabetical order instead of in some coherent structure.

This file is that same syntax, but reordered to be strictly bottom-up. It also
folds in formal syntax from extensions Crymap supports. Changes from extensions
indicate the source RFC; anything not marked with an RFC is from RFC 3501.

Comments starting with `; ED:` are not from any RFC but are notes inserted by
the author of this file.

* Fundamental grammar

Most grammars would call this the "lexical syntax", but IMAP doesn't have such
a thing due to issues like `[` being legal in atoms but also being used to
delimit them (there's around 5 different atom-like constructs depending how one
counts).

Atoms:

#+BEGIN_SRC
atom            = 1*ATOM-CHAR

ATOM-CHAR       = <any CHAR except atom-specials>
                  ; ED: Any ASCII but CTL, SP, (){*%\"]
                  ; ED: Yes, it forbids { but not }, and allows [ but not ]
                  ; ED: Note, [ is in some cases used to delimit atoms, so
                  ; ED: there are really two different productions here.

atom-specials   = "(" / ")" / "{" / SP / CTL / list-wildcards /
                  quoted-specials / resp-specials

resp-specials   = "]"

list-wildcards  = "%" / "*"

quoted-specials = DQUOTE / "\"
#+END_SRC

Strings:

#+BEGIN_SRC
astring         = 1*ASTRING-CHAR / string

ASTRING-CHAR   = ATOM-CHAR / resp-specials
                 ; ED: Any ASCII but CTL, SP, (){*%\"
                 : ED: Basically atom except ] is also allowed

string          = quoted / literal

quoted          = DQUOTE *QUOTED-CHAR DQUOTE

QUOTED-CHAR     = <any TEXT-CHAR except quoted-specials> /
                  "\" quoted-specials

literal         = "{" number "}" CRLF *CHAR8
                    ; Number represents the number of CHAR8s

CHAR8           = %x01-ff
                    ; any OCTET except NUL, %x00

tag             = 1*<any ASTRING-CHAR except "+">
                  ; ED: Any ASCII but CTL, SP, (){*%\"+
#+END_SRC

Stuff involving NIL:

#+BEGIN_SRC
nil             = "NIL"

nstring         = string / nil
#+END_SRC


Numbers:

#+BEGIN_SRC
digit-nz        = %x31-39
                    ; 1-9

number          = 1*DIGIT
                    ; Unsigned 32-bit integer
                    ; (0 <= n < 4,294,967,296)

nz-number       = digit-nz *DIGIT
                    ; Non-zero unsigned 32-bit integer
                    ; (0 < n < 4,294,967,296)
#+END_SRC

* Basic pervasive data types

#+BEGIN_SRC
header-fld-name = astring

mailbox         = "INBOX" / astring
                    ; INBOX is case-insensitive.  All case variants of
                    ; INBOX (e.g., "iNbOx") MUST be interpreted as INBOX
                    ; not as an astring.  An astring which consists of
                    ; the case-insensitive sequence "I" "N" "B" "O" "X"
                    ; is considered to be INBOX and not an astring.
                    ;  Refer to section 5.1 for further
                    ; semantic details of mailbox names.

seq-number      = nz-number / "*"
                    ; message sequence number (COPY, FETCH, STORE
                    ; commands) or unique identifier (UID COPY,
                    ; UID FETCH, UID STORE commands).
                    ; * represents the largest number in use.  In
                    ; the case of message sequence numbers, it is
                    ; the number of messages in a non-empty mailbox.
                    ; In the case of unique identifiers, it is the
                    ; unique identifier of the last message in the
                    ; mailbox or, if the mailbox is empty, the
                    ; mailbox's current UIDNEXT value.
                    ; The server should respond with a tagged BAD
                    ; response to a command that uses a message
                    ; sequence number greater than the number of
                    ; messages in the selected mailbox.  This
                    ; includes "*" if the selected mailbox is empty.

seq-range       = seq-number ":" seq-number
                    ; two seq-number values and all values between
                    ; these two regardless of order.
                    ; Example: 2:4 and 4:2 are equivalent and indicate
                    ; values 2, 3, and 4.
                    ; Example: a unique identifier sequence range of
                    ; 3291:* includes the UID of the last message in
                    ; the mailbox, even if that value is less than 3291.

sequence-set    = (seq-number / seq-range) *("," sequence-set)
                    ; set of seq-number values, regardless of order.
                    ; Servers MAY coalesce overlaps and/or execute the
                    ; sequence in any order.
                    ; Example: a message sequence number set of
                    ; 2,4:7,9,12:* for a mailbox with 15 messages is
                    ; equivalent to 2,4,5,6,7,9,12,13,14,15
                    ; Example: a message sequence number set of *:4,5:7
                    ; for a mailbox with 10 messages is equivalent to
                    ; 10,9,8,7,6,5,4,5,6,7 and MAY be reordered and
                    ; overlap coalesced to be 4,5,6,7,8,9,10.

; ED: This is the "UID" data type
uniqueid        = nz-number
                    ; Strictly ascending

#+END_SRC

* Dates and Times

#+BEGIN_SRC
date            = date-text / DQUOTE date-text DQUOTE

date-day        = 1*2DIGIT
                    ; Day of month

date-day-fixed  = (SP DIGIT) / 2DIGIT
                    ; Fixed-format version of date-day

date-month      = "Jan" / "Feb" / "Mar" / "Apr" / "May" / "Jun" /
                  "Jul" / "Aug" / "Sep" / "Oct" / "Nov" / "Dec"
                  ; ED: Presumably this is *case-insensitive* despite
                  ; ED: being shown in mixed case.

date-text       = date-day "-" date-month "-" date-year

date-year       = 4DIGIT

date-time       = DQUOTE date-day-fixed "-" date-month "-" date-year
                  SP time SP zone DQUOTE
                  ; ED: Note how date-time uses a different date syntax
                  ; ED: than plain date

time            = 2DIGIT ":" 2DIGIT ":" 2DIGIT
                    ; Hours minutes seconds

zone            = ("+" / "-") 4DIGIT
                    ; Signed four-digit value of hhmm representing
                    ; hours and minutes east of Greenwich (that is,
                    ; the amount that the given time differs from
                    ; Universal Time).  Subtracting the timezone
                    ; from the given time will give the UT form.
                    ; The Universal Time zone is "+0000".
#+END_SRC

* Authentication

#+BEGIN_SRC
authenticate    = "AUTHENTICATE" SP auth-type *(CRLF base64)

auth-type       = atom
                    ; Defined by [SASL]

base64          = *(4base64-char) [base64-terminal]

base64-char     = ALPHA / DIGIT / "+" / "/"
                    ; Case-sensitive

base64-terminal = (2base64-char "==") / (3base64-char "=")

login           = "LOGIN" SP userid SP password

password        = astring

userid          = astring

#+END_SRC

* Flags

#+BEGIN_SRC
flag            = "\Answered" / "\Flagged" / "\Deleted" /
                  "\Seen" / "\Draft" / flag-keyword / flag-extension
                    ; Does not include "\Recent"
                    ; ED: Case-insensitive

flag-extension  = "\" atom
                    ; Future expansion.  Client implementations
                    ; MUST accept flag-extension flags.  Server
                    ; implementations MUST NOT generate
                    ; flag-extension flags except as defined by
                    ; future standard or standards-track
                    ; revisions of this specification.

flag-fetch      = flag / "\Recent"

flag-keyword    = atom
                    ; ED: Case-insensitive

flag-list       = "(" [flag *(SP flag)] ")"

flag-perm       = flag / "\*"
#+END_SRC

* Envelope

#+BEGIN_SRC
envelope        = "(" env-date SP env-subject SP env-from SP
                  env-sender SP env-reply-to SP env-to SP env-cc SP
                  env-bcc SP env-in-reply-to SP env-message-id ")"

env-bcc         = "(" 1*address ")" / nil

env-cc          = "(" 1*address ")" / nil

env-date        = nstring

env-from        = "(" 1*address ")" / nil

env-in-reply-to = nstring

env-message-id  = nstring

env-reply-to    = "(" 1*address ")" / nil

env-sender      = "(" 1*address ")" / nil

env-subject     = nstring

env-to          = "(" 1*address ")" / nil

address         = "(" addr-name SP addr-adl SP addr-mailbox SP
                  addr-host ")"

addr-adl        = nstring
                    ; Holds route from [RFC-2822] route-addr if
                    ; non-NIL

addr-host       = nstring
                    ; NIL indicates [RFC-2822] group syntax.
                    ; Otherwise, holds [RFC-2822] domain name

addr-mailbox    = nstring
                    ; NIL indicates end of [RFC-2822] group; if
                    ; non-NIL and addr-host is NIL, holds
                    ; [RFC-2822] group name.
                    ; Otherwise, holds [RFC-2822] local-part
                    ; after removing [RFC-2822] quoting

addr-name       = nstring
                    ; If non-NIL, holds phrase from [RFC-2822]
                    ; mailbox after removing [RFC-2822] quoting
#+END_SRC

* Body Structure

#+BEGIN_SRC
body            = "(" (body-type-1part / body-type-mpart) ")"

body-type-1part = (body-type-basic / body-type-msg / body-type-text)
                  [SP body-ext-1part]

body-type-basic = media-basic SP body-fields
                    ; MESSAGE subtype MUST NOT be "RFC822"

body-type-msg   = media-message SP body-fields SP envelope
                  SP body SP body-fld-lines

body-type-text  = media-text SP body-fields SP body-fld-lines

body-ext-1part  = body-fld-md5 [SP body-fld-dsp [SP body-fld-lang
                  [SP body-fld-loc *(SP body-extension)]]]
                    ; MUST NOT be returned on non-extensible
                    ; "BODY" fetch

body-type-mpart = 1*body SP media-subtype
                  [SP body-ext-mpart]
                    ; ED: Notice the list of body parts uses a list syntax
                    ; ED: entirely unlike the lists used in every other part
                    ; ED: of IMAP: items are simply concatenated without
                    ; ED: spaces. Also note that there is no legal way to
                    ; ED: describe a multipart with no parts. The closest
                    ; ED: thing to conforming to the syntax is to just make
                    ; ED: 1*body an empty string, i.e., treat it as *body.

body-ext-mpart  = body-fld-param [SP body-fld-dsp [SP body-fld-lang
                  [SP body-fld-loc *(SP body-extension)]]]
                    ; MUST NOT be returned on non-extensible
                    ; "BODY" fetch

body-extension  = nstring / number /
                   "(" body-extension *(SP body-extension) ")"
                    ; Future expansion.  Client implementations
                    ; MUST accept body-extension fields.  Server
                    ; implementations MUST NOT generate
                    ; body-extension fields except as defined by
                    ; future standard or standards-track
                    ; revisions of this specification.

body-fields     = body-fld-param SP body-fld-id SP body-fld-desc SP
                  body-fld-enc SP body-fld-octets

; ED: Content-Description
body-fld-desc   = nstring

; ED: Content-Disposition
body-fld-dsp    = "(" string SP body-fld-param ")" / nil

; ED: Content-Transfer-Encoding
body-fld-enc    = (DQUOTE ("7BIT" / "8BIT" / "BINARY" / "BASE64"/
                  "QUOTED-PRINTABLE") DQUOTE) / string

; ED: Content-ID
body-fld-id     = nstring

; ED: Content-Language
body-fld-lang   = nstring / "(" string *(SP string) ")"

; ED: Content-Location
body-fld-loc    = nstring

body-fld-lines  = number

; ED: Undefined what format the md5 is in; presumably lowercase hex
body-fld-md5    = nstring

body-fld-octets = number

; ED: The parameters of the Content-Type header.
body-fld-param  = "(" string SP string *(SP string SP string) ")" / nil

media-basic     = ((DQUOTE ("APPLICATION" / "AUDIO" / "IMAGE" /
                  "MESSAGE" / "VIDEO") DQUOTE) / string) SP
                  media-subtype
                    ; Defined in [MIME-IMT]

media-message   = DQUOTE "MESSAGE" DQUOTE SP DQUOTE "RFC822" DQUOTE
                    ; Defined in [MIME-IMT]

media-subtype   = string
                    ; Defined in [MIME-IMT]

media-text      = DQUOTE "TEXT" DQUOTE SP media-subtype
                    ; Defined in [MIME-IMT]
#+END_SRC

* Responses (refer to later sections for things like FETCH responses)

#+BEGIN_SRC
greeting        = "*" SP (resp-cond-auth / resp-cond-bye) CRLF

response        = *(continue-req / response-data) response-done

continue-req    = "+" SP (resp-text / base64) CRLF

response-data   = "*" SP (resp-cond-state / resp-cond-bye /
                  mailbox-data / message-data / capability-data) CRLF

; ED: Rewrapped for clarity
mailbox-data    =  "FLAGS" SP flag-list /
                   "LIST" SP mailbox-list /
                   "LSUB" SP mailbox-list /
                   "SEARCH" *(SP nz-number) /
                   "STATUS" SP mailbox SP "(" [status-att-list] ")" /
                   number SP "EXISTS" /
                   number SP "RECENT"

message-data    = nz-number SP ("EXPUNGE" / ("FETCH" SP msg-att))

response-done   = response-tagged / response-fatal

response-fatal  = "*" SP resp-cond-bye CRLF
                    ; Server closes connection immediately

response-tagged = tag SP resp-cond-state CRLF

resp-cond-auth  = ("OK" / "PREAUTH") SP resp-text
                    ; Authentication condition

resp-cond-bye   = "BYE" SP resp-text

resp-cond-state = ("OK" / "NO" / "BAD") SP resp-text
                    ; Status condition

resp-text       = ["[" resp-text-code "]" SP] text

; ED Re-wrapped for clarity
resp-text-code  = "ALERT" /
                  "BADCHARSET" [SP "(" astring *(SP astring) ")" ] /
                  capability-data /
                  "PARSE" /
                  "PERMANENTFLAGS" SP "(" [flag-perm *(SP flag-perm)] ")" /
                  "READ-ONLY" /
                  "READ-WRITE" /
                  "TRYCREATE" /
                  "UIDNEXT" SP nz-number /
                  "UIDVALIDITY" SP nz-number /
                  "UNSEEN" SP nz-number /
                  atom [SP 1*<any TEXT-CHAR except "]">]

text            = 1*TEXT-CHAR

TEXT-CHAR       = <any CHAR except CR and LF>

#+END_SRC
* Capabilities

#+BEGIN_SRC
capability      = ("AUTH=" auth-type) / atom
                    ; New capabilities MUST begin with "X" or be
                    ; registered with IANA as standard or
                    ; standards-track

capability-data = "CAPABILITY" *(SP capability) SP "IMAP4rev1"
                  *(SP capability)
                    ; Servers MUST implement the STARTTLS, AUTH=PLAIN,
                    ; and LOGINDISABLED capabilities
                    ; Servers which offer RFC 1730 compatibility MUST
                    ; list "IMAP4" as the first capability.

#+END_SRC
* LIST and LSUB

#+BEGIN_SRC
list            = "LIST" SP mailbox SP list-mailbox

lsub            = "LSUB" SP mailbox SP list-mailbox

list-mailbox    = 1*list-char / string

list-char       = ATOM-CHAR / list-wildcards / resp-specials
                  ; ED: Any ASCII but CTL, SP, (){\"
mailbox-list    = "(" [mbx-list-flags] ")" SP
                   (DQUOTE QUOTED-CHAR DQUOTE / nil) SP mailbox

mbx-list-flags  = *(mbx-list-oflag SP) mbx-list-sflag
                  *(SP mbx-list-oflag) /
                  mbx-list-oflag *(SP mbx-list-oflag)

mbx-list-oflag  = "\Noinferiors" / flag-extension
                    ; Other flags; multiple possible per LIST response

mbx-list-sflag  = "\Noselect" / "\Marked" / "\Unmarked"
                    ; Selectability flags; only one per LIST response
#+END_SRC
* FETCH

#+BEGIN_SRC
fetch           = "FETCH" SP sequence-set SP ("ALL" / "FULL" / "FAST" /
                  fetch-att / "(" fetch-att *(SP fetch-att) ")")

; ED: Rewrapped for clarity
fetch-att       = "ENVELOPE" /
                  "FLAGS" /
                  "INTERNALDATE" /
                  "RFC822" [".HEADER" / ".SIZE" / ".TEXT"] /
                  ; ED: This means "BODY" | "BODYSTRUCTURE", not "BODY STRUCTURE"
                  "BODY" ["STRUCTURE"] /
                  "UID" /
                  "BODY" section ["<" number "." nz-number ">"] /
                  "BODY.PEEK" section ["<" number "." nz-number ">"]

section         = "[" [section-spec] "]"

section-spec    = section-msgtext / (section-part ["." section-text])

; ED Re-wrapped for clarity
section-msgtext = "HEADER" /
                  "HEADER.FIELDS" [".NOT"] SP header-list /
                  "TEXT"
                    ; top-level or MESSAGE/RFC822 part

section-part    = nz-number *("." nz-number)
                    ; body part nesting

section-text    = section-msgtext / "MIME"
                    ; text other than actual body part (headers, etc.)

header-list     = "(" header-fld-name *(SP header-fld-name) ")"

msg-att         = "(" (msg-att-dynamic / msg-att-static)
                   *(SP (msg-att-dynamic / msg-att-static)) ")"

msg-att-dynamic = "FLAGS" SP "(" [flag-fetch *(SP flag-fetch)] ")"
                    ; MAY change for a message

; ED: Rewrapped for clarity
msg-att-static  = "ENVELOPE" SP envelope /
                  "INTERNALDATE" SP date-time /
                  "RFC822" [".HEADER" / ".TEXT"] SP nstring /
                  "RFC822.SIZE" SP number /
                  "BODY" ["STRUCTURE"] SP body /
                  "BODY" section ["<" number ">"] SP nstring /
                  "UID" SP uniqueid
                    ; MUST NOT change for a message
#+END_SRC

* SEARCH

#+BEGIN_SRC
search          = "SEARCH" [SP "CHARSET" SP astring] 1*(SP search-key)
                    ; CHARSET argument to MUST be registered with IANA

; ED: Rewrapped for clarity
search-key      = "ALL" /
                  "ANSWERED" /
                  "BCC" SP astring /
                  "BEFORE" SP date /
                  "BODY" SP astring /
                  "CC" SP astring /
                  "DELETED" /
                  "FLAGGED" /
                  "FROM" SP astring /
                  "KEYWORD" SP flag-keyword /
                  "NEW" /
                  "OLD" /
                  "ON" SP date /
                  "RECENT" /
                  "SEEN" /
                  "SINCE" SP date /
                  "SUBJECT" SP astring /
                  "TEXT" SP astring /
                  "TO" SP astring /
                  "UNANSWERED" /
                  "UNDELETED" /
                  "UNFLAGGED" /
                  "UNKEYWORD" SP flag-keyword /
                  "UNSEEN" /
                    ; Above this line were in [IMAP2]
                  "DRAFT" /
                  "HEADER" SP header-fld-name SP astring /
                  "LARGER" SP number /
                  "NOT" SP search-key /
                  "OR" SP search-key SP search-key /
                  "SENTBEFORE" SP date /
                  "SENTON" SP date /
                  "SENTSINCE" SP date /
                  "SMALLER" SP number /
                  "UID" SP sequence-set /
                  "UNDRAFT" /
                  sequence-set /
                  "(" search-key *(SP search-key) ")"
#+END_SRC
* Mailbox management

#+BEGIN_SRC
create          = "CREATE" SP mailbox
                    ; Use of INBOX gives a NO error

delete          = "DELETE" SP mailbox
                    ; Use of INBOX gives a NO error

examine         = "EXAMINE" SP mailbox

rename          = "RENAME" SP mailbox SP mailbox
                    ; Use of INBOX as a destination gives a NO error

select          = "SELECT" SP mailbox

status          = "STATUS" SP mailbox SP
                  "(" status-att *(SP status-att) ")"

status-att      = "MESSAGES" / "RECENT" / "UIDNEXT" / "UIDVALIDITY" /
                  "UNSEEN"

status-att-list =  status-att SP number *(SP status-att SP number)

subscribe       = "SUBSCRIBE" SP mailbox

unsubscribe     = "UNSUBSCRIBE" SP mailbox

#+END_SRC
* Message management

#+BEGIN_SRC
append          = "APPEND" SP mailbox [SP flag-list] [SP date-time] SP
                  literal

copy            = "COPY" SP sequence-set SP mailbox

store           = "STORE" SP sequence-set SP store-att-flags

store-att-flags = (["+" / "-"] "FLAGS" [".SILENT"]) SP
                  (flag-list / (flag *(SP flag)))

#+END_SRC

* Top-level command syntax

#+BEGIN_SRC
command         = tag SP (command-any / command-auth / command-nonauth /
                  command-select) CRLF
                    ; Modal based on state

command-any     = "CAPABILITY" / "LOGOUT" / "NOOP" / x-command
                    ; Valid in all states

command-auth    = append / create / delete / examine / list / lsub /
                  rename / select / status / subscribe / unsubscribe
                    ; Valid only in Authenticated or Selected state

command-nonauth = login / authenticate / "STARTTLS"
                    ; Valid only when in Not Authenticated state

command-select  = "CHECK" / "CLOSE" / "EXPUNGE" / copy / fetch / store /
                  uid / search
                    ; Valid only when in Selected state


uid             = "UID" SP (copy / fetch / search / store)
                    ; Unique identifiers used instead of message
                    ; sequence numbers

x-command       = "X" atom <experimental command arguments>
#+END_SRC
